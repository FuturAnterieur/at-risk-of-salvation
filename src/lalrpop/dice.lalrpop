use std::str::FromStr;
use crate::lalrpop::ast::{DiceRollExpr, SuccessiveDiceRollExpr, AllDiceRollsExpr, SuccessiveRollsOptions};

grammar;

pub AllDiceRollsExpr : Box<AllDiceRollsExpr> = {
    <a:DiceRollExpr> => Box::new(AllDiceRollsExpr::SingleRoll(a)),
    <opt:SuccessiveRollsOptions> ":" <b:SuccessiveDiceRollExpr> => Box::new(AllDiceRollsExpr::SuccessiveRolls(opt, b)),
    <b:SuccessiveDiceRollExpr> => Box::new(AllDiceRollsExpr::SuccessiveRolls(SuccessiveRollsOptions::Cumulative, b)),
}


pub DiceRollExpr: Box<DiceRollExpr> = {
    <a:DiceRollExpr> "or" <b:Factor> => Box::new(DiceRollExpr::OrExpr(a, b)),
    Factor,
};

Factor: Box<DiceRollExpr> = {
    <n:Num> => Box::new(DiceRollExpr::SingleValue(n)),
    <m:Num> "to" <n:Num> => Box::new(DiceRollExpr::ToExpr(m,n)),
};

pub SuccessiveDiceRollExpr: Box<SuccessiveDiceRollExpr> = {
    <a:SuccessiveDiceRollExpr> "+" <b:SuccessiveFactor> => Box::new(SuccessiveDiceRollExpr::AndExpr(a,b)),
    <n:Num> "+" <b:SuccessiveFactor> => Box::new(SuccessiveDiceRollExpr::AndExpr(Box::new(SuccessiveDiceRollExpr::SingleValue(n)),b)),
    <q:Quantity> "x" <n:Num> => Box::new(SuccessiveDiceRollExpr::MulExpr(q,n)),
};

SuccessiveFactor: Box<SuccessiveDiceRollExpr> = {
    <n:Num> => Box::new(SuccessiveDiceRollExpr::SingleValue(n)),
    <q:Quantity> "x" <n:Num> => Box::new(SuccessiveDiceRollExpr::MulExpr(q,n)),
};


pub Num: i16 = {
    "One" => 1,
    "Two" => 2,
    "Three" => 3,
    "Four" => 4,
    "Five" => 5,
    "Six" => 6,
    <s:r"[0-9]+"> => i16::from_str(s).unwrap_or(-1),
};

pub Quantity: u32 = {
    r"[0-9]+" => u32::from_str(<>).unwrap_or(0)
};

pub SuccessiveRollsOptions: SuccessiveRollsOptions = {
    "one-chance" => SuccessiveRollsOptions::NotCumulative,
    "accum" => SuccessiveRollsOptions::Cumulative,
}